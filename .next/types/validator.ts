// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/controle/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/controle">> = Specific
  const handler = {} as typeof import("../../app/controle/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/export/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/export">> = Specific
  const handler = {} as typeof import("../../app/export/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/import/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/import">> = Specific
  const handler = {} as typeof import("../../app/import/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/dashboard/filters/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/dashboard/filters">> = Specific
  const handler = {} as typeof import("../../app/api/dashboard/filters/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/dashboard/outstanding/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/dashboard/outstanding">> = Specific
  const handler = {} as typeof import("../../app/api/dashboard/outstanding/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/dashboard/recent-imports/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/dashboard/recent-imports">> = Specific
  const handler = {} as typeof import("../../app/api/dashboard/recent-imports/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/by-bu/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/by-bu">> = Specific
  const handler = {} as typeof import("../../app/api/db/by-bu/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/by-chantier/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/by-chantier">> = Specific
  const handler = {} as typeof import("../../app/api/db/by-chantier/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/by-exutoire-complete/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/by-exutoire-complete">> = Specific
  const handler = {} as typeof import("../../app/api/db/by-exutoire-complete/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/by-exutoire-details/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/by-exutoire-details">> = Specific
  const handler = {} as typeof import("../../app/api/db/by-exutoire-details/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/by-exutoire/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/by-exutoire">> = Specific
  const handler = {} as typeof import("../../app/api/db/by-exutoire/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/debug/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/debug">> = Specific
  const handler = {} as typeof import("../../app/api/db/debug/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/filtered/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/filtered">> = Specific
  const handler = {} as typeof import("../../app/api/db/filtered/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save-complete/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save-complete">> = Specific
  const handler = {} as typeof import("../../app/api/db/save-complete/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save-corrected/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save-corrected">> = Specific
  const handler = {} as typeof import("../../app/api/db/save-corrected/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save-legacy/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save-legacy">> = Specific
  const handler = {} as typeof import("../../app/api/db/save-legacy/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save-minimal/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save-minimal">> = Specific
  const handler = {} as typeof import("../../app/api/db/save-minimal/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save-simple/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save-simple">> = Specific
  const handler = {} as typeof import("../../app/api/db/save-simple/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/save/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/save">> = Specific
  const handler = {} as typeof import("../../app/api/db/save/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/summary-simple/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/summary-simple">> = Specific
  const handler = {} as typeof import("../../app/api/db/summary-simple/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/db/summary/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/db/summary">> = Specific
  const handler = {} as typeof import("../../app/api/db/summary/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/health/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/health">> = Specific
  const handler = {} as typeof import("../../app/api/health/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/test-supabase/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/test-supabase">> = Specific
  const handler = {} as typeof import("../../app/api/test-supabase/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/transform-complete/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/transform-complete">> = Specific
  const handler = {} as typeof import("../../app/api/transform-complete/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/transform-debug/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/transform-debug">> = Specific
  const handler = {} as typeof import("../../app/api/transform-debug/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/transform-fixed/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/transform-fixed">> = Specific
  const handler = {} as typeof import("../../app/api/transform-fixed/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/transform/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/transform">> = Specific
  const handler = {} as typeof import("../../app/api/transform/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
